generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  email        String    @unique
  password     String
  name         String?
  avatarUrl    String?
  dateOfBirth  DateTime?
  bio          String?
  location     String?
  posts        Post[]
  likesPost    LikePost[]
  likesComment LikeComment[]
  comments     Comment[]
  followers    Follows[] @relation("following")
  followings    Follows[] @relation("follower")
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Follows {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  follower    User   @relation("follower", fields: [followerId], references: [id])
  followerId  String @db.ObjectId
  following   User   @relation("following", fields: [followingId], references: [id])
  followingId String @db.ObjectId
}

model Post {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String    @db.ObjectId
  likes     LikePost[]
  comments  Comment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Comment {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  user      User   @relation(fields: [userId], references: [id])
  userId    String @db.ObjectId
  post      Post   @relation(fields: [postId], references: [id])
  postId    String @db.ObjectId
  likes     LikeComment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model LikePost {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
  post   Post   @relation(fields: [postId], references: [id])
  postId String @db.ObjectId
}

model LikeComment {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  user      User   @relation(fields: [userId], references: [id])
  userId    String @db.ObjectId
  comment   Comment @relation(fields: [commentId], references: [id])
  commentId String @db.ObjectId 
}